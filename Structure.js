function Structure() {}

//------------------------------------------------------------------------------------------------------
//											AES S-BOX
//------------------------------------------------------------------------------------------------------
Structure.sbox = 
[
	[ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76 ],
	[ 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0 ],
	[ 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15 ],
	[ 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75 ],
	[ 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84 ],
	[ 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF ],
	[ 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8 ],
	[ 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2 ],
	[ 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73 ],
	[ 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB ],
	[ 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79 ],
	[ 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08 ],
	[ 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A ],
	[ 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E ],
	[ 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF ],
	[ 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 ]
];
//------------------------------------------------------------------------------------------------------





//------------------------------------------------------------------------------------------------------
//										AES INVERSE S-BOX
//------------------------------------------------------------------------------------------------------
Structure.inverseSbox = 
[
	[ 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB ],
	[ 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB ],
	[ 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E ],
	[ 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25 ],
	[ 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92 ],
	[ 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84 ],
	[ 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06 ],
	[ 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B ],
	[ 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73 ],
	[ 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E ],
	[ 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B ],
	[ 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4 ],
	[ 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F ],
	[ 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF ],
	[ 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61 ],
	[ 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D ]
];
//-----------------------------------------------------------------------------------------------------





//-------------------------------------------------------------------------------------------------
//											ROUND COEFFICIENTS 
//-------------------------------------------------------------------------------------------------
Structure.rcon = 
[
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
];
//-------------------------------------------------------------------------------------------------


//Mix column matrix used in MixColumns layer
Structure.mixColMatrix = 
[
	[ 0x02, 0x03, 0x01, 0x01 ],
	[ 0x01, 0x02, 0x03, 0x01 ],
	[ 0x01, 0x01, 0x02, 0x03 ],
	[ 0x03, 0x01, 0x01, 0x02 ]
];


//Inverse mix columns matrix used in InverseMixColumns layer
//Values are the inverse in GF(2^8) of those in mixColMatrix 
Structure.inverseMixColMatrix = 
[
	[ 0x0e, 0x0b, 0x0d, 0x09 ],
	[ 0x09, 0x0e, 0x0b, 0x0d ],
	[ 0x0d, 0x09, 0x0e, 0x0b ],
	[ 0x0b, 0x0d, 0x09, 0x0e ]
];

//Returns the round coefficient at index
Structure.getRconEntry = function(index)
{
	var rc =  Structure.convert(this.rcon[index].toString(16), 16, 2);
	return rc;
};


//Returns the mix column entry a[row][column]
//returns the inverse value if Mode::DECRYPT
Structure.getMixColEntry = function(row, col, encrypt_mode)
{
	var value;
	if(encrypt_mode)
		value =  Structure.mixColMatrix[row][col].toString(16);
	else
		value =  Structure.inverseMixColMatrix[row][col].toString(16);

	return Structure.convert(value, 16, 2);
};


//Returns the s-box entry a[row][column]
//returns the inverse value if Mode::DECRYPT
Structure.getSboxEntry = function(row, column, encrypt_mode)
{
	var value;
	if(encrypt_mode)
		value = Structure.sbox[row][column].toString(16);
	else
		value = Structure.inverseSbox[row][column].toString(16);
	
	return Structure.convert(value, 16, 2);
};


//Returns the sbox entry for the bin
//row and column of s-box table are derived from bin
//left-most bits = row, right-most bits = column
Structure.getSboxEntryFromBin = function(bin, encrypt_mode)
{
	bin = Structure.padBin(bin);
	var row = Structure.convert(bin.substring(0, 4), 2, 10);
	var col = Structure.convert(bin.substring(4, 8), 2, 10);

	return Structure.getSboxEntry(row, col, encrypt_mode);
};


//pads a binary string up to 8bits
Structure.padBin = function(bin)
{
	if(bin.length >= 8) return bin;

	var b = '00000000';
	return b.substring(0, b.length - bin.length) + bin;
};

//pads a hex string up 00
Structure.padHex = function(hex)
{
	if(hex.length >= 2) return hex;

	var h = '00';
	return h.substring(0, h.length - hex.length) + hex;
};


//Converts the value from base 'from' to base 'to'
Structure.convert = function(value, from, to)
{
	if(from == 2) value = Structure.padBin(value);
	var parsed = parseInt(value, from).toString(to);

	if(to == 2)
		return Structure.padBin(parsed);
	else
		return parsed; 
};

//Prints out the 4 bytes in row
Structure.printStateRow = function(state, rowNumber)
{
	var colStr = '';
	for(var col = 0; col < 4; col++)
		colStr += state[rowNumber][col] + ' ';

	console.log(colStr + '\n');
};


//Prints out the state 4x4 matrix 
Structure.printState = function(state)
{
	for(var row = 0; row < 4; row++)
	{
		var colStr = '';
		for(var col = 0; col < 4; col++)
			colStr += state[row][col] + ' ';
		
		console.log(colStr + '\n');
	}
};

Structure.statesToString = function(states)
{
	var numStates	=	states.length;
	var message		=	"";

	for(var i = 0; i < numStates; i++)
		message += Structure.stateToString(states[i]);

	return message;
};


//Prints out the string represented by the states
//numStates: size(states)
Structure.printDecryptedMessage = function(states)
{
	var numStates	=	states.length;
	var message		=	"";

	for(var i = 0; i < numStates; i++)
		message += Structure.stateToString(states[i]);

	return message;
};

//Creates the skeleton for the state 
Structure.createState = function()
{
	var state = [];
	for(var i = 0; i < 4; i++)
		state.push([]);
	

	return state;
};


//Adds the bytes in str into the passed state
Structure.makeState = function(str)
{
	var state = Structure.createState();
	var index = 0;

	for(var row = 0; row < 4; row++)
		for(var col = 0; col < 4; col++)
			state[col][row] = str[index++];
	
	return state;
};

Structure.generateState = function()
{
	var state = Structure.createState();
	var dec, next;

	for(var row = 0; row < 4; row++)
	{
		for(var col = 0; col < 4; col++)
		{
			dec				=	Math.floor(Math.random() * 256);
			next			=	String.fromCharCode(dec).toString(2);
			state[col][row]	=	next;
		}
	}

	return state;
};

//Copies the state b into a
Structure.copyState = function(stateA, stateB)
{
	for(var row = 0; row < 4; row++)
		for(var col = 0; col < 4; col++)
			stateA[row][col] = stateB[row][col];
};


//puts the character bytes in the str into a state
//values are converted into binary 
Structure.strToState = function(str)
{
	var bytes = [];
	for(var i = 0; i < 16; i++)
	{
		if(str.length <= i)
			bytes.push(Structure.padBin(""));
		
		else
			bytes.push(Structure.padBin(str.charCodeAt(i).toString(2)));
	}

	return Structure.makeState(bytes);
};


Structure.stateToHex = function(state)
{
	Structure.printState(state);
	var str = "";
	for(var row = 0; row < 4; row++)
	{
		for(var col = 0; col < 4; col++)
		{
			var hex		=	Structure.padHex(Structure.convert(state[col][row], 2, 16));

			if(hex != '00')
				str	 +=	hex;
		}
	}

	return str;
};


//puts the hex into a state
//values sare converted into binary
Structure.hexToState = function(hex)
{
	if(hex.length != 32) return;

	var bytes	=	[];
	var index	=	0;
	var hIndex	=	0;

	while(index < 16)
	{
		bytes.push(Structure.convert(hex.substring(hIndex, hIndex + 2), 16, 2));
		hIndex += 2;

		index++;
	}

	return Structure.makeState(bytes);
};

//Returns the string value of the state
Structure.stateToString = function(state)
{
	var str = "";
	for(var row = 0; row < 4; row++)
	{
		for(var col = 0; col < 4; col++)
		{
			var hex		=	Structure.padHex(Structure.convert(state[col][row], 2, 16));

			if(hex != '00')
				str			+=	String.fromCharCode(parseInt(hex, 16));
		}
	}

	return str;
};


//returns the number of states (blocks) needed for the text
Structure.getNumStates = function(str)
{
	return Math.ceil(str.length / 16);
};


//performs a bitwise XOR: a XOR b
Structure.xor = function(a, b)
{
	a = parseInt(a, 2);
	b = parseInt(b, 2);

	return Structure.padBin((a ^ b).toString(2));
};


//Performs matrix/state addition in GF(2^8)
//Each entry is xor'd with the corresponding entry
Structure.addStates = function(stateA, stateB)
{
	for(var row = 0; row < 4; row++)
		for(var col = 0; col < 4; col++)
			stateA[col][row] = Structure.xor(stateA[col][row], stateB[col][row]);
};


//bitwise left shifts a by b
Structure.shiftLeft = function(a, b)
{
	a = parseInt(a, 2);
	return Structure.padBin((a << b).toString(2)).slice(-8);
};


//bitwise right shifts a by b
Structure.shiftRight = function(a, b)
{
	a = parseInt(a, 2);
	return Structure.padBin((a >> b).toString(2)).slice(-8);
};


//returns the column at colNum in the matrix
Structure.getColumn = function(state, column)
{
	var col = [];
	col.push(state[0][column]);
	col.push(state[1][column]);
	col.push(state[2][column]);
	col.push(state[3][column]);

	return col;
};

//Creates states from the string
Structure.makeStates = function(str)
{
	var len			=	str.length;
	var strIndex	=	0;
	var numStates	=	Structure.getNumStates(str);
	var states		=	[[[]]];

	for(var sIndex = 0; sIndex < numStates; sIndex++)
	{
		var nextState;
		var nextStr;

		if(strIndex + 16 > len)
			nextStr = str.substring(strIndex, len);

		else
			nextStr = str.substring(strIndex, strIndex + 16);

		strIndex		+=	16;
		nextState		=	Structure.strToState(nextStr);
		states[sIndex]	=	nextState;
	}
			
	return states;
};
